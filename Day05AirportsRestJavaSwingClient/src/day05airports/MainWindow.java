/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package day05airports;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author grego
 */
public class MainWindow extends javax.swing.JFrame {

    DefaultListModel<String> modelAirportList;
    ArrayList<Airport> list;

    ApiAirports apiAirports = new ApiAirports();

    /**
     * Creates new form MainWindow airport
     */
    public MainWindow() {
        try {
            modelAirportList = new DefaultListModel<>();
            list = apiAirports.getAllAirports("code");
            for (Airport airport : list) {
                modelAirportList.addElement(airport.toString());
            }

            initComponents();
        } catch (ApiErrorException ex) {
            JOptionPane.showMessageDialog(null, "Fatal error: " + ex.getMessage());
            System.exit(1); // terminate abruptly
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstAirports = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfCode = new javax.swing.JTextField();
        tfCity = new javax.swing.JTextField();
        tfLatitude = new javax.swing.JTextField();
        tfLongitude = new javax.swing.JTextField();
        comboKind = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnImport = new javax.swing.JButton();
        btnFindNearest = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnSortByKind = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lstAirports.setModel(modelAirportList);
        lstAirports.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstAirportsMouseClicked(evt);
            }
        });
        lstAirports.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstAirportsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstAirports);

        jLabel1.setText("Code:");

        jLabel2.setText("Latitude:");

        jLabel3.setText("City:");

        jLabel4.setText("Longitude:");

        jLabel5.setText("Kind:");

        tfCode.setFocusCycleRoot(true);
        tfCode.setNextFocusableComponent(tfCity);
        tfCode.setPreferredSize(new java.awt.Dimension(90, 25));

        tfCity.setFocusCycleRoot(true);
        tfCity.setNextFocusableComponent(tfLatitude);

        tfLatitude.setFocusCycleRoot(true);
        tfLatitude.setNextFocusableComponent(tfLongitude);

        tfLongitude.setFocusCycleRoot(true);

        comboKind.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Passenger", "Cargo", "Military", "Private" }));

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnImport.setText("Import from CSV file ...");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnFindNearest.setText("Find nearest airport to the one selected");
        btnFindNearest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindNearestActionPerformed(evt);
            }
        });

        jButton1.setText("Sort by Code");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Sort by City");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnSortByKind.setText("Sort by Kind");
        btnSortByKind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortByKindActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(8, 8, 8)
                        .addComponent(btnSortByKind)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfCity)
                            .addComponent(tfLatitude, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(tfLongitude)
                            .addComponent(comboKind, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete))
                    .addComponent(btnImport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnFindNearest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(8, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(btnSortByKind))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tfCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tfLatitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(tfLongitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(comboKind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnUpdate)
                            .addComponent(btnDelete))
                        .addGap(18, 18, 18)
                        .addComponent(btnFindNearest)
                        .addGap(7, 7, 7)
                        .addComponent(btnImport))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lstAirportsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstAirportsValueChanged
        // TODO get seletted row's data
        //System.out.println("New selection: " + lstAirports.getSelectedValue());
    }//GEN-LAST:event_lstAirportsValueChanged

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // add new new airport

        try {

            Airport airport = prepAirport();

            String addNew = apiAirports.addNew(airport);

            //clear fields if successfull
            if (addNew.equals(airport.getCode())) {
                tfCode.setText("");
                tfCity.setText("");
                tfLatitude.setText("");
                tfLongitude.setText("");
                comboKind.setSelectedItem(Airport.Kind.Passenger);
                JOptionPane.showMessageDialog(null, "Airport saved! ");
            }

            // refresh list
            refreshList();

        } catch (ApiErrorException ex) {
            JOptionPane.showMessageDialog(null, "api error: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            // update airport
            Airport airport = prepAirport();

            String editRow = apiAirports.update(airport);

            //clear fields if successfull
            if (editRow.equals(airport.getCode())) {
                tfCode.setText("");
                tfCity.setText("");
                tfLatitude.setText("");
                tfLongitude.setText("");
                comboKind.setSelectedItem(Airport.Kind.Passenger);
                JOptionPane.showMessageDialog(null, "Airport updated! ");
            }

            // refresh list
            refreshList();
        } catch (ApiErrorException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            // delete an airport

            System.out.println("tfCode.getText(): " + tfCode.getText());
            Boolean isDeleted = apiAirports.delete(tfCode.getText());
            if (isDeleted) {
                JOptionPane.showMessageDialog(null, "Airport deleted!!");
                refreshList();
            }
        } catch (ApiErrorException ex) {
            JOptionPane.showMessageDialog(null, "api error: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnFindNearestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindNearestActionPerformed
        //  
        // find selected lan/lon
        // go one by one of the list save the distances
        // find the smalles

        String selectedRow = lstAirports.getSelectedValue();
        double[] selectedCoord = getLanLon(selectedRow);
        double[] coords = new double[2];
        double selectedLan = selectedCoord[0];
        double selectedLon = selectedCoord[1];

        double[] distances = new double[lstAirports.getModel().getSize()];

        String[] theList = new String[lstAirports.getModel().getSize()];
        //save distances
        for (int i = 0; i < lstAirports.getModel().getSize(); i++) {
            //System.out.println(lstAirports.getModel().getElementAt(i));
            theList[i] = lstAirports.getModel().getElementAt(i);
            coords = getLanLon(theList[i]);
            distances[i] = distance(selectedLan, coords[0], selectedLon, coords[1], 0, 0);
        }

        JOptionPane.showMessageDialog(null, theList[findLowestDistance(distances)]);
        //System.out.println();


    }//GEN-LAST:event_btnFindNearestActionPerformed

    private double[] getLanLon(String row) {
        String[] rowItems = row.split("\\s+");
        double[] coordinates = new double[2];
        coordinates[0] = Double.parseDouble(rowItems[4]);
        coordinates[1] = Double.parseDouble(rowItems[6].replace(",", ""));

        return coordinates;
    }

    private int findLowestDistance(double[] distances) {

        double min = distances[0];
        int indexMin = 0;
        for (int i = 1; i < distances.length; i++) {

            if (distances[i] != 0 && distances[i] < min) {
                min = distances[i];
                indexMin = i;
            }
        }

        return indexMin;
    }

    private double distance(double latSelected, double latDestiny, double lonSelected,
            double lonDestiny, double el1, double el2) {

        final int R = 6371; // Radius of the earth

        double latDistance = Math.toRadians(latDestiny - latSelected);
        double lonDistance = Math.toRadians(lonDestiny - lonSelected);
        double a = Math.sin(latDistance / 2) * Math.sin(latDistance / 2)
                + Math.cos(Math.toRadians(latSelected)) * Math.cos(Math.toRadians(latDestiny))
                * Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        double distance = R * c * 1000; // convert to meters

        double height = el1 - el2;

        distance = Math.pow(distance, 2) + Math.pow(height, 2);

        return Math.sqrt(distance);
    }
    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnImportActionPerformed


    private void lstAirportsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstAirportsMouseClicked
        String[] rowItems = lstAirports.getSelectedValue().split("\\s+");

        tfCode.setText(rowItems[0]);
        tfCity.setText(rowItems[2]);
        tfLatitude.setText(rowItems[4]);
        tfLongitude.setText(rowItems[6].replace(",", ""));
        Airport.Kind kind = Airport.Kind.valueOf(rowItems[7]);
        comboKind.setSelectedItem(kind.toString());
    }//GEN-LAST:event_lstAirportsMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            refreshList();
        } catch (ApiErrorException ex) {
            JOptionPane.showMessageDialog(null, "Fatal error: " + ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // sortByCity
        
        modelAirportList.removeAllElements();
        try {
            list = apiAirports.getAllAirports("city");
        } catch (ApiErrorException ex) {
            JOptionPane.showMessageDialog(null, "Fatal error: " + ex.getMessage());
        }
        for (Airport refresh : list) {
            modelAirportList.addElement(refresh.toString());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnSortByKindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortByKindActionPerformed
        modelAirportList.removeAllElements();
        try {
            list = apiAirports.getAllAirports("kind");
        } catch (ApiErrorException ex) {
            JOptionPane.showMessageDialog(null, "Fatal error: " + ex.getMessage());
        }
        for (Airport refresh : list) {
            modelAirportList.addElement(refresh.toString());
        }
    }//GEN-LAST:event_btnSortByKindActionPerformed

    private void refreshList() throws ApiErrorException {
        modelAirportList.removeAllElements();
        list = apiAirports.getAllAirports("code");
        for (Airport refresh : list) {
            modelAirportList.addElement(refresh.toString());
        }
    }

    private Airport prepAirport() {
        Airport airport = new Airport();

        airport.setCode(tfCode.getText());
        airport.setCity(tfCity.getText());
        airport.setLatitude(Double.parseDouble(tfLatitude.getText()));
        airport.setLongitude(Double.parseDouble(tfLongitude.getText()));

        Airport.Kind kind = Airport.Kind.valueOf(comboKind.getSelectedItem().toString());
        airport.setKind(kind);
        return airport;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFindNearest;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnSortByKind;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboKind;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lstAirports;
    private javax.swing.JTextField tfCity;
    private javax.swing.JTextField tfCode;
    private javax.swing.JTextField tfLatitude;
    private javax.swing.JTextField tfLongitude;
    // End of variables declaration//GEN-END:variables
}
